//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `LabelView`.
    static let labelView = _R.nib._LabelView()
    /// Nib `SegueButton`.
    static let segueButton = _R.nib._SegueButton()
    /// Nib `SelectColorView`.
    static let selectColorView = _R.nib._SelectColorView()
    
    /// `UINib(name: "LabelView", in: bundle)`
    static func labelView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelView)
    }
    
    /// `UINib(name: "SegueButton", in: bundle)`
    static func segueButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.segueButton)
    }
    
    /// `UINib(name: "SelectColorView", in: bundle)`
    static func selectColorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectColorView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchViewController`.
    static let launchViewController = _R.storyboard.launchViewController()
    /// Storyboard `SelectColorViewController`.
    static let selectColorViewController = _R.storyboard.selectColorViewController()
    
    /// `UIStoryboard(name: "LaunchViewController", bundle: ...)`
    static func launchViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchViewController)
    }
    
    /// `UIStoryboard(name: "SelectColorViewController", bundle: ...)`
    static func selectColorViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selectColorViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _LabelView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LabelView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NameLabelView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NameLabelView
      }
      
      fileprivate init() {}
    }
    
    struct _SegueButton: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SegueButton"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SegueButton? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SegueButton
      }
      
      fileprivate init() {}
    }
    
    struct _SelectColorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectColorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SelectColorView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectColorView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchViewController.validate()
      try selectColorViewController.validate()
    }
    
    struct launchViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = R.hostingBundle
      let launchViewController = StoryboardViewControllerResource<LaunchViewController>(identifier: "LaunchViewController")
      let name = "LaunchViewController"
      
      func launchViewController(_: Void = ()) -> LaunchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.launchViewController().launchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchViewController' could not be loaded from storyboard 'LaunchViewController' as 'LaunchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct selectColorViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SelectColorViewController
      
      let bundle = R.hostingBundle
      let mergeTextViewController = StoryboardViewControllerResource<SelectColorViewController>(identifier: "MergeTextViewController")
      let name = "SelectColorViewController"
      
      func mergeTextViewController(_: Void = ()) -> SelectColorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mergeTextViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.selectColorViewController().mergeTextViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mergeTextViewController' could not be loaded from storyboard 'SelectColorViewController' as 'SelectColorViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
